/*------------------------------------------------------------------------------
  Copyright (c) Foxfire Technologies (India) Ltd.  All rights reserved

  Revision History:

  Date        Person  Comments

  2021/04/06  AY/YJ   pr_Cubing_AddCartons: Ported changes done by onsite team (HA-2553)
  2021/03/31  TK      pr_Cubing_AddCartons: Generate UCCBarcode based upon SortOrder (HA-GoLive)
  2021/03/28  TK      pr_Cubing_AddCartons, pr_Cubing_AddCartonDetails & pr_Cubing_Execute:
                        Code optimization for UCC barcode generation (HA-2471)
  2021/03/05  TK      pr_Cubing_AddCartons: User SortIndex instead of generating CartonHeaders RecordId
                      pr_Cubing_Execute: Changes to update SortIndex on CartonHeaders table (HA-2127)
  2020/05/30  TK      pr_Cubing_AddCartons: Changes to update inventory class on ship cartons (HA-703)
  2020/03/13  TK      pr_Cubing_AddCartons: Get the range of LPNs generated by LPN instead of LPNId (S2GCA-1110)
  2019/10/29  TK      pr_Cubing_AddCartons: Update Order info on Ship Cartons before UCCBarcode generation (S2GCA-1008)
  2019/10/07  TK      pr_Cubing_PrepareToCubePicks & pr_Cubing_AddCartons: Initial Revision (CID-883)
------------------------------------------------------------------------------*/

Go

if object_id('dbo.pr_Cubing_AddCartons') is not null
  drop Procedure pr_Cubing_AddCartons;
Go
/*------------------------------------------------------------------------------
  Proc pr_Cubing_AddCartons: This procedure generated ship cartons for each carton type
     from carton headers table
------------------------------------------------------------------------------*/
Create Procedure pr_Cubing_AddCartons
  (@WaveId               TRecordId,
   @Operation            TOperation,
   @BusinessUnit         TBusinessUnit,
   @UserId               TUserId)
as
  declare @vReturnCode           TInteger,
          @vMessageName          TMessageName,

          @vSeqNoCount           TInteger,
          @vSequenceName         TCategory,
          @vNextSeqNo            bigint,
          @vLastSeqNo            bigint,
          @vSeqNoMaxLength       TControlValue;

  declare @ttLPNs                TLPNDetails,
          @ttLPNShipLabelData    TLPNShipLabelData;
begin
  SET NOCOUNT ON;

  /* Initialize */
  select @vReturnCode  = 0,
         @vMessageName = null;

  /* if there are no cartons, then exit */
  if not exists(select * from #CubeCartonHdrs)
    goto ExitHandler;

  /* Create required hash tables */
  select * into #LPNs from @ttLPNs;

  /* Get Controls */
  select @vSeqNoMaxLength = dbo.fn_Controls_GetAsInteger('LPN_Ship', 'SeqNoMaxLength', '9', @BusinessUnit, @UserId)

  /* Get the num cartons to be generated */
  select @vSeqNoCount = count(*) from #CubeCartonHdrs;

  /* Get the sequnce number range */
  exec pr_Sequence_GetNext 'Seq_LPN_Ship', @vSeqNoCount, @UserId, @BusinessUnit, @vNextSeqNo output, @vLastSeqNo output;

  /* Populate LPNs table with required info to insert LPNs */
  insert into #LPNs (LPN, LPNType, LPNStatus, OnhandStatus, Ownership, Warehouse,
                     InventoryClass1, InventoryClass2, InventoryClass3, InputRecordId)
    select SN.SequenceNo, 'S'/* Ship */, 'F' /* New Carton */, 'U' /* Un-Available */, Ownership, Warehouse,
           InventoryClass1, InventoryClass2, InventoryClass3, CH.SortIndex
    from #CubeCartonHdrs CH
      join dbo.fn_GenerateSequence (@vNextSeqNo, @vLastSeqNo, 1) SN on (CH.SortIndex = SN.RecordId)
    order by CH.SortIndex;

  /* We will have sequence numbers generated add LPNType and pad 0's as needed */
  update #LPNs
  set LPN = 'S' + dbo.fn_LeftPadNumber(LPN, @vSeqNoMaxLength);

  /* Invoke procedure to insert LPNs  */
  exec pr_LPNs_Insert @BusinessUnit, @UserId;

  /* Assign each LPN to a carton recordId */
  update ttCH
  set ttCH.LPNId = L.LPNId,
      ttCH.LPN   = L.LPN
  from #CubeCartonHdrs ttCH
    join #LPNs L on (ttCH.SortIndex = L.RecordId);

  /* Update shipcartons with Order and wave info
     IMP: Order info Ship Cartons needs to be updated before UCCBarcode generation */
  update L
  set L.OrderId         = ttCH.OrderId,
      L.PickBatchId     = ttCH.WaveId,
      L.PickBatchNo     = ttCH.WaveNo,
      L.PickTicketNo    = ttCH.PickTicket,
      L.SalesOrder      = ttCH.SalesOrder,
      L.Ownership       = ttCH.Ownership,
      L.DestWarehouse   = ttCH.Warehouse,
      L.CartonType      = ttCH.CartonType,
      L.Status          = 'F' /* New TempLabel */,
      L.InventoryClass1 = ttCH.InventoryClass1,
      L.InventoryClass2 = ttCH.InventoryClass2,
      L.InventoryClass3 = ttCH.InventoryClass3
  from LPNs L
    join #CubeCartonHdrs ttCH on (L.LPNId = ttCH.LPNId);

ErrorHandler:
  if (@vMessageName is not null)
    exec @vReturnCode = pr_Messages_ErrorHandler @vMessageName;

ExitHandler:
  return(coalesce(@vReturnCode, 0));
end /* pr_Cubing_AddCartons */

Go
