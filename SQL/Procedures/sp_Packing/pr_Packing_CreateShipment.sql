/*------------------------------------------------------------------------------
  Copyright (c) Foxfire Technologies (India) Ltd.  All rights reserved

  Revision History:

  Date        Person  Comments

  2022/03/15  RV      pr_Packing_CreateShipment: Made changes to generate the shipment for LPN and based upon the GenerationMethod and IntegrationMethod (FBV3-921)
  2022/03/02  SV      pr_Packing_CreateShipment: Moved code of inserting data into #ShipLabelsToInsert to Rules (FBV3-921)
  2022/02/23  OK      pr_Packing_CreateShipment: Included CartonType in #ShiplabelsToInsert (FBV3-914)
  2022/02/12  AY      pr_Packing_CreateShipment: Downgrade Carrier request errors to warnings (CIMSV3-1886)
  2022/01/03  RV      pr_Packing_CreateShipment: Made changes to populate the task and wave info on ship labels (FBV3-675)
  2021/12/04  RV      pr_Packing_CreateShipment: insert ship labels default as evaluate (CIMSV3-1746)
  2021/11/25  RV      pr_Packing_CreateShipment: Separe the proc pr_Carrier_CreateShipment to process shipments and call (CIMSV3-1746)
  2021/06/13  TK      pr_Packing_CreateShipment: Initial Revision (BK-349)
------------------------------------------------------------------------------*/

Go

if object_id('dbo.pr_Packing_CreateShipment') is not null
  drop Procedure pr_Packing_CreateShipment;
Go
/*------------------------------------------------------------------------------
  Proc pr_Packing_CreateShipment: When a package has been packed, we need to evaluate
    if we need to create a small package shipment and if so, what interface we use etc.

  If it is not small package, the CreateShipment will be NotRequired.
  If it is small package shipment, then CreateShipment will be set based upon rules. Rules
    will also determine the type of shipment to be created (Multi-package and/or Single-Package)
    and the labels required (Shipping label, Return label)

 If Carrier Interface is
   CIMSSI  - then it retuns the data needed for CIMSSI
   API     - then it creates the API record
   API-CLR - then it also generates the label/tracking number

  If API record is created and APIWorkFlow is NOT 'CLR', which means label will be generated by a Job or Label generator
    so in this case @CreateShipment would return 'ToBeCreated'
  If Shiplabels are created for the Order/LPN then @CreateShipment will return 'Created'
------------------------------------------------------------------------------*/
Create Procedure pr_Packing_CreateShipment
  (@OrderId              TRecordId,
   @LPNId                TRecordId,
   @Operation            TOperation = null,
   @BusinessUnit         TBusinessUnit,
   @UserId               TUserId,
   @APIRecordId          TRecordId      output,
   @CreateShipment       TControlValue  output,
   @CreateShipmentInput  TXML           output)
as
  declare @vReturnCode             TInteger,
          @vMessageName            TMessageName,

          @vLPN                    TLPN,
          @vOrderId                TRecordId,
          @vPickTicket             TPickTicket,
          @vOrderStatus            TStatus,
          @vShipVia                TShipvia,
          @vCarrier                TCarrier,
          @vIsSmallPackageCarrier  TFlags,
          @vShipmentType           TFlags,
          @vLPNsAssigned           TCount,
          @vReturnLabelRequired    TFlags,
          @vLabelTypesToGenerate   TDescription,

          @vXmlRulesData           TXML;

  declare @ttShipLabels            TShipLabels;
begin /* pr_Packing_CreateShipment */
  SET NOCOUNT ON;

  /* Initialize */
  select @vReturnCode    = 0,
         @vMessageName   = null,
         @CreateShipment = 'NotRequired'; -- Initialize

  /* Create temp tables */
  select * into #ShipLabelsToInsert from @ttShipLabels;

  if (@LPNId is not null)
    select @vLPN    = LPN,
           @OrderId = OrderId
    from LPNs
    where (LPNId = @LPNId);

  /* Get Order info */
  select @vOrderId               = OH.OrderId,
         @vPickTicket            = OH.PickTicket,
         @vShipVia               = OH.ShipVia,
         @vCarrier               = SV.Carrier,
         @vIsSmallPackageCarrier = SV.IsSmallPackageCarrier,
         @vOrderStatus           = OH.Status,
         @vLPNsAssigned          = OH.LPNsAssigned,
         @vReturnLabelRequired   = OH.ReturnLabelRequired
  from OrderHeaders OH
    join ShipVias SV on (SV.ShipVia = OH.ShipVia)
  where (OrderId = @OrderId);

  /* Get Carrier Info */
  select @vCarrier               = Carrier,
         @vIsSmallPackageCarrier = IsSmallPackageCarrier
  from ShipVias
  where (ShipVia = @vShipVia);

  /* Build rules data xml */
  select @vXmlRulesData = dbo.fn_XMLNode('RootNode',
                           dbo.fn_XMLNode('Module',                'Packing') +
                           dbo.fn_XMLNode('Operation',             @Operation) +
                           dbo.fn_XMLNode('OrderId',               @vOrderId) +
                           dbo.fn_XMLNode('PickTicket',            @vPickTicket) +
                           dbo.fn_XMLNode('OrderStatus',           @vOrderStatus) +
                           dbo.fn_XMLNode('LPNId',                 @LPNId) +
                           dbo.fn_XMLNode('LPN',                   @vLPN) +
                           dbo.fn_XMLNode('ShipVia',               @vShipVia) +
                           dbo.fn_XMLNode('Carrier',               @vCarrier) +
                           dbo.fn_XMLNode('IsSmallPackageCarrier', @vIsSmallPackageCarrier) +
                           dbo.fn_XMLNode('BusinessUnit',          @BusinessUnit) +
                           dbo.fn_XMLNode('UserId',                @UserId) +
                           dbo.fn_XMLNode('Version',               'V3'));

  /* Below rules execution will insert LPNs info into #ShipLabelsToInsert */
  exec pr_RuleSets_ExecuteAllRules 'ShipLabels_Insert', @vXmlRulesData, @BusinessUnit;

  /* Determine the carrier interface and process the create shipment records */
  exec pr_Carrier_CreateShipment 'Packing' /* Module */, @Operation, @BusinessUnit, @UserId;

  /* If there are any errors in Creating the shipment, then just treat them as warnings so that user
     can continue to pack other warnings */
  update #ResultMessages set MessageType = 'W' where MessageName like @Operation + '_Shipment%';

  /* If we created shipment using CLR, then return the same info to caller */
  select top 1 @CreateShipment = 'Created'
  from #ShipLabelsToInsert
  where GenerationMethod = 'CLR';

  /* If there is atleast one record which we have to process, then CreateShipment = ToBeCreated */
  select top 1 @CreateShipment        = 'ToBeCreated',
               @vShipmentType         = ShipmentType,
               @vLabelTypesToGenerate = LabelsRequired
  from #ShipLabelsToInsert
  where (IntegrationMethod = 'CIMSSI') and (ProcessStatus = 'Initial');

  /* If none of the records have to be processed, then we can exit */
  if (@CreateShipment = 'NotRequired') return;

  /* If we have to process using CIMSSI, then build the XML for CIMSI */
  if (exists (select * from #ShipLabelsToInsert where IntegrationMethod = 'CIMSSI' and ProcessStatus = 'Initial'))
    select @CreateShipmentInput = dbo.fn_XMLNode('CreateShipmentInput',
                                    dbo.fn_XMLNode('Carrier',         @vCarrier) +
                                    dbo.fn_XMLNode('LPNId',           @LPNId) +
                                    dbo.fn_XMLNode('LPN',             @vLPN) +
                                    dbo.fn_XMLNode('OrderId',         @vOrderId) +
                                    dbo.fn_XMLNode('PickTicket',      @vPickTicket) +
                                    dbo.fn_XMLNode('ShipmentType',    @vShipmentType) +
                                    dbo.fn_XMLNode('LabelTypes',      @vLabelTypesToGenerate));

ExitHandler:
  return(coalesce(@vReturnCode, 0));
end /* pr_Packing_CreateShipment */

Go
